// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  groups    Group[]
  campaigns MessageCampaign[]
  messages  Message[]

  @@map("users")
}

model Group {
  id          String   @id @default(cuid())
  groupName   String
  description String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator                User                    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  medicalRepresentatives MedicalRepresentative[]
  activities            GroupActivity[]

  @@map("groups")
}

model MedicalRepresentative {
  id        String   @id @default(cuid())
  mrId      String   @unique
  firstName String
  lastName  String
  phone     String
  email     String?
  comments  String?
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  group       Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  messageLogs MessageLog[]

  @@map("medical_representatives")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  imageUrl  String?
  type      String   @default("text")
  createdBy String
  createdAt DateTime @default(now())

  // Relations
  creator   User               @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  campaigns MessageCampaign[]

  @@map("messages")
}

model MessageCampaign {
  id          String   @id @default(cuid())
  messageId   String
  createdBy   String
  scheduledAt DateTime?
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  message     Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  creator     User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  messageLogs MessageLog[]

  @@map("message_campaigns")
}

model MessageLog {
  id          String   @id @default(cuid())
  campaignId  String
  mrId        String
  phoneNumber String
  status      String   @default("queued")
  sentAt      DateTime?
  deliveredAt DateTime?
  errorMessage String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  campaign              MessageCampaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  medicalRepresentative MedicalRepresentative @relation(fields: [mrId], references: [id], onDelete: Cascade)

  @@map("message_logs")
}

model GroupActivity {
  id          String   @id @default(cuid())
  groupId     String
  action      String
  description String
  performedBy String
  performerName String
  timestamp   DateTime @default(now())
  metadata    Json?

  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("group_activities")
}
